(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{274:function(a,e,r){"use strict";r.r(e);var v=r(2),t=Object(v.a)({},function(){var a=this,e=a.$createElement,r=a._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"js中“较高级”的正则表达式知识点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#js中“较高级”的正则表达式知识点","aria-hidden":"true"}},[a._v("#")]),a._v(" JS中“较高级”的正则表达式知识点")]),a._v(" "),r("p",[a._v("Javascript的正则表达式虽然很早以前就接触过了，那时候还在做编辑的时候，用AS写了一个文本替换的小程序。")]),a._v(" "),r("p",[a._v("最近逛书店，发现有本21天学通XXX的系列书，一向对这种名字的书没有好感，不过还是很好奇地拿了起来，随便翻了一下，正好看到一些以前没有注意到的地方，回来继续查看犀牛书等书补充了一下。")]),a._v(" "),r("h2",{attrs:{id:"xxx"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xxx","aria-hidden":"true"}},[a._v("#")]),a._v(" (XXX)")]),a._v(" "),r("p",[a._v("capturing groups（捕获性分组，犀牛书上叫组合）。")]),a._v(" "),r("p",[a._v("这个最常见的，就是用括号把一部分表达式包起来，方便在后面用"),r("code",[a._v("+")]),a._v("或者"),r("code",[a._v("*")]),a._v("或者"),r("code",[a._v("{n,m}")]),a._v("等来表示数量等，又或者有时候要用到"),r("code",[a._v("|")]),a._v("的情况。")]),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"xxx-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xxx-2","aria-hidden":"true"}},[a._v("#")]),a._v(" (?:XXX)")]),a._v(" "),r("p",[a._v("non capture group （非捕获性分组，犀牛书上叫只组合）")]),a._v(" "),r("p",[a._v("和捕获性分组的区别就是，这里的括号内的内容不被计算入分组，也就是说是不存入$1,$2这些里面的。")]),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"x-y"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#x-y","aria-hidden":"true"}},[a._v("#")]),a._v(" x(?=y)")]),a._v(" "),r("p",[a._v("lookahead （零宽度正预测先行断言、先行断言）")]),a._v(" "),r("p",[a._v("匹配x当且仅当x后面紧跟y。")]),a._v(" "),r("p",[a._v("例如，"),r("code",[a._v("/Jack(?=Sprat)/")]),a._v(" 匹配 'Jack' 当且仅当后面是'Sprat'。 "),r("code",[a._v("/Jack(?=Sprat|Frost)/")]),a._v(" 匹配 'Jack' 当且仅当后面是 'Sprat' 或 'Frost' 。然而，无论 'Sprat' 还是 'Frost' 都不会进入匹配的结果里面，就好像宽度为0一样。")]),a._v(" "),r("p",[a._v("::: warning 注意\nlookhehind（零宽度正回顾后发断言、后行断言）在Javascript中是不支持的！也就是说，如果想要匹配java开头的script，是"),r("strong",[a._v("不能")]),a._v("使用"),r("code",[a._v("/(?<java)script/")]),a._v("来匹配的。\n:::")]),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"x-y-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#x-y-2","aria-hidden":"true"}},[a._v("#")]),a._v(" x(?!y)")]),a._v(" "),r("p",[a._v("negated lookahead（零宽度负预测先行断言、负向先行断言）")]),a._v(" "),r("p",[a._v("匹配 'x' 当且仅当 'x' 后面不是 'y'.")]),a._v(" "),r("p",[a._v("例如，/\\d+(?!.)/ 匹配一个数字当且仅当后面跟的不是一个小数点。/\\d+(?!.)/.exec(\"3.141\") 匹配 '141' 而不是 '3.141'。")]),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"n"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#n","aria-hidden":"true"}},[a._v("#")]),a._v(" \\n")]),a._v(" "),r("p",[a._v("n为正整数")]),a._v(" "),r("p",[a._v("和第n个分组第一次匹配的"),r("code",[a._v("字符")]),a._v("相匹配。")]),a._v(" "),r("p",[a._v("例如，想要/(['\"]).*?\\1/，可以匹配成对引号的内容。意思就是\"abc'是不会被匹配的，只有\"abc\"或者'abc'可以。后面的\\1必须和前面第一个捕获的内容一模一样。")]),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"先行断言和非捕获分组的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#先行断言和非捕获分组的区别","aria-hidden":"true"}},[a._v("#")]),a._v(" 先行断言和非捕获分组的区别")]),a._v(" "),r("p",[a._v("前者根本就不进入匹配，当然也不进入捕获的分组了；后者会进入匹配，不过不进入捕获分组。")]),a._v(" "),r("p",[a._v("例如，"),r("code",[a._v("/boy(?=z)/")]),a._v("表示的是后面有z字母的boy，即boyz这样的形式的boy满足条件，如果是boy zh 或者boy and 则不匹配，但是！即使是boyz，在捕获的结果里面，z是完全不会出现的；"),r("code",[a._v("/boy(?:z)/")]),a._v("会捕获到整个boyz，而且结果中也是boyz，只不过z不会出现在分组中，也就是"),r("code",[a._v("$1 != 'a'")])]),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"其他的细节"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#其他的细节","aria-hidden":"true"}},[a._v("#")]),a._v(" 其他的细节")]),a._v(" "),r("p",[a._v("使用new的形式新建正则表达式的话，对于反斜杠（backsplash）稍微麻烦一点。")]),a._v(" "),r("p",[a._v("例如， "),r("code",[a._v("var r=/\\\\/")]),a._v(" 用new的话，需要写成下面的形式：")]),a._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" r"),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("RegExp")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[a._v("'\\\\\\\\'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),r("p",[a._v("为什么呢，因为new的话，第一个参数是一个字符串，而字符串里面也是支持反斜杠转义的！")]),a._v(" "),r("p",[a._v("比如 "),r("code",[a._v("'lm\\no'")]),a._v("实际上不是"),r("code",[a._v("lm反斜杠no")]),a._v("，而是"),r("code",[a._v("lm换行o")]),a._v("，要达到目的，需要写成"),r("code",[a._v("'lm\\\\no'")])]),a._v(" "),r("p",[a._v("回到上面的，"),r("code",[a._v("/\\\\/")]),a._v("这个表示一个反斜杠字符，其本身是含有两个"),r("code",[a._v("\\")]),a._v("的正则表达式，所以当里面的两个反斜杠转换成字符串就是四个反斜杠啦！")]),a._v(" "),r("p",[a._v("PS：正则表达式中"),r("code",[a._v("/")]),a._v("不需要转义，所以字符"),r("code",[a._v("/")]),a._v("用"),r("code",[a._v("///")]),a._v("的正则表达式来表示，同时"),r("code",[a._v("/")]),r("strong",[a._v("字符")]),a._v("不需要转义，用new来新建时候直接写作"),r("code",[a._v("new RegExp('/')")]),a._v("。")]),a._v(" "),r("p",[a._v("参考资料：")]),a._v(" "),r("blockquote",[r("p",[r("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions",target:"_blank",rel:"noopener noreferrer"}},[a._v("MDN: Regular Expressions"),r("OutboundLink")],1)]),a._v(" "),r("p",[r("a",{attrs:{href:"http://www.regular-expressions.info/javascript.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("regular-expressions.info"),r("OutboundLink")],1)])])])},[],!1,null,null,null);e.default=t.exports}}]);